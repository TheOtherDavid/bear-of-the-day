AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Bear of the Day, to send bears to people who want bears in their inbox.
Resources:
  BearOfTheDayFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bear_of_the_day.lambda_handler
      Runtime: python3.8
      CodeUri: backend/bear_of_the_day
      Description: Sends an email with a bear picture of the day.
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          OPENAI_API_KEY: !Sub ${OpenAIKey}
          RECIPIENTS: !Sub ${Recipients}
          SENDER_EMAIL: !Sub ${SenderEmail}
          SENDER_PASS: !Sub ${SenderPass}
          AWS_BUCKET_NAME: !Sub ${BucketName}
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Sub ${BucketName}
        - Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${BucketName}/*
      Events:
        BearOfTheDay:
          Type: Schedule
          Properties:
            Schedule: cron(0 13 * * ? *)
  GetLatestBearFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get_latest_bear.lambda_handler
      Runtime: python3.8
      CodeUri: backend/get_latest_bear
      Description: Returns the latest bear image from the S3 bucket.
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          AWS_BUCKET_NAME: !Sub ${BucketName}
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Sub ${BucketName}
      Events:
        GetLatestBearApi:
          Type: Api
          Properties:
            Path: /bear
            Method: get
  BearApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title: Bear API
        paths:
          /bear:
            get:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLatestBearFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: aws_proxy
                credentials: !GetAtt ApiGatewayExecutionRole.Arn
  ApiGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdaFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt GetLatestBearFunction.Arn
Parameters:
  OpenAIKey:
    Type: String
  Recipients:
    Type: String
  SenderEmail:
    Type: String
  SenderPass:
    Type: String
  BucketName:
    Type: String